Déclaration :
Variable constante : const <type> <nom> = <expr>
fonction à un ou plusieurs paramètres : <type> <nom>(<type> <args>) <expr>

<type> : int | bool
<nom> doit respecter le regex

Expression : 
Littéraux entiers, booléens, tuples : 12 ou true ou (32, true)
Référence a des symboles ?
Application de fonction : <nom>(<args>)
expressions parenthésées et conditionnelles : if(<cond>) <expr> [else <expr>]
Déclaration locales avec un corps : let <nom> = <expr> in <expr>
Pattern matching : case <expr> of <casepatterns>
<casepatterns> : <casepattern> | <casepattern> <casepatterns>
<casepattern> : <pattern> -> <expr>
<pattern> : <value> | <var> | _
Opérations unaires : <op> <expr>
<op> : ++ | -- | ! | -
Opérations binaires : <expr> <op> <expr>
<op> : + | - | * | /
Logique : <expr> <log> <expr>
<log> : && | ||
comparaison : <expr> <comp> <expr>
<comp> : == | != | < | <= | > | >=

binaire, logique et comparaison peuvent être en 1 vu qu'elles fonctionnent plus ou moins de la meme façon mais apres je sais pas s'il veut qu'on fasse bien la distinction